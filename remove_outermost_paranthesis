# To remove the outermost parentheses from a given expression, you can use the following steps:

# Start by iterating through each character in the expression.
# Maintain a count of open parentheses encountered.
# If an open parenthesis is encountered, increment the count.
# If a close parenthesis is encountered, decrement the count.
# Check if the count is 0 and the current character is a close parenthesis. If true, remove both the outermost open and close parentheses.
# Finally, return the modified expression.
# Brute force approach
#include <iostream>
#include <string>

std::string removeOuterParentheses(const std::string& expression) {
    int count = 0;
    std::string result = "";

    for (char c : expression) {
        if (c == '(') {
            if (count > 0) {
                result += c;
            }
            count++;
        } else if (c == ')') {
            count--;
            if (count > 0) {
                result += c;
            }
        }
    }

    return result;
}

int main() {
    std::string expression = "(a+b)-(c+d)";
    std::string result = removeOuterParentheses(expression);
    std::cout << result << std::endl;  // Output: "a+b-c+d"

    return 0;
}



#  Now comes optimal approach

#include <iostream>
#include <string>
#include <stack>

std::string removeOuterParentheses(const std::string& expression) {
    std::string result = "";
    std::stack<char> parenthesesStack;

    for (char c : expression) {
        if (c == '(') {
            if (!parenthesesStack.empty()) {
                result += c;
            }
            parenthesesStack.push(c);
        } else if (c == ')') {
            parenthesesStack.pop();
            if (!parenthesesStack.empty()) {
                result += c;
            }
        }
    }

    return result;
}

int main() {
    std::string expression = "(a+b)-(c+d)";
    std::string result = removeOuterParentheses(expression);
    std::cout << result << std::endl;  // Output: "a+b-c+d"

    return 0;
}
